- given: user account exists
  serviceFunctionName: userAccountService.createUserAccount
  responseTests:
    - pm.collectionVariables.set('userAccountId', body._id)

- when: try to change password when supplied current password is invalid
  serviceFunctionName: userAccountService.changeUserPassword
  argument:
    currentPassword: 123wrongPwd!
  responseStatusCode: 400
  responseTests:
    - pm.expect(body.errorCode).to.eql('userAccountService.1')

- when: try to change password with invalid user name
  serviceFunctionName: userAccountService.changeUserPassword
  argument:
    userName: wrong@test.com
  responseStatusCode: 400
  responseTests:
    - pm.expect(body.errorCode).to.eql('userAccountService.2')

- when: try to change password to same as current password
  serviceFunctionName: userAccountService.changeUserPassword
  argument:
    newPassword: tttAO123%!=
  responseStatusCode: 400
  responseTests:
    - pm.expect(body.errorCode).to.eql('userAccountService.3')

- when: try to change password when new password does not match repeated new password
  serviceFunctionName: userAccountService.changeUserPassword
  argument:
    newPassword: 888rightPwd!
    repeatNewPassword: 123wrongPwd!
  responseStatusCode: 400
  responseTests:
    - pm.expect(body.errorCode).to.eql('userAccountService.4')

- cleanup: no user accounts exists
  serviceFunctionName: userAccountService.deleteAllUserAccounts
