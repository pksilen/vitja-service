- testTemplate:
    serviceFunctionName: salesItemService.createSalesItem
    argument:
      title: '{{title}}'
      description: '{{description}}'
      area: '{{area}}'
      productDepartment: '{{category}}'
      productCategory: '{{category}}'
      productSubCategory: '{{category}}'
      price: '{{price}}'
    response:
      tests:
        - pm.collectionVariables.set("salesItemId", response._id)
  tests:
    - testName: create sales item with price = 1
      testProperties:
        price: 1
        title: firstTitle
        description: firstDescription
        area: Area1
        category: Vehicles
    - testName: create sales item with price = 2
      testProperties:
        price: 2
        title: secondTitle
        description: secondDescription
        area: Area2
        category: Clothes

- testTemplate:
    serviceFunctionName: salesItemService.getSalesItems
    argument:
      '{{argumentPropertyName1}}': '{{argumentPropertyValue1}}'
      '{{argumentPropertyName2}}': '{{argumentPropertyValue2}}'
    response:
      tests:
        - pm.expect(response[0].{{responsePropertyName}}).to.eql({{responsePropertyValue}});
          pm.expect(response.length).to.eql({{responseLength}});
  tests:
    - testName: get sales items for textFilter = 'secondTitle'
      testProperties:
        argumentPropertyName1: textFilter
        argumentPropertyValue1: secondTitle
        responsePropertyName: title
        responsePropertyValue: '"secondTitle"'
        responseLength: 1

    - testName: get sales items for textFilter = 'secondDescription'
      testProperties:
        argumentPropertyName1: textFilter
        argumentPropertyValue1: secondDescription
        responsePropertyName: title
        responsePropertyValue: '"secondTitle"'
        responseLength: 1

    - testName: get sales items where areas contains Area2
      testProperties:
        argumentPropertyName1: areas
        argumentPropertyValue1:
          - Area2
        responsePropertyName: title
        responsePropertyValue: '"secondTitle"'
        responseLength: 1

    - testName: get sales items where productDepartments contains 'Clothes'
      testProperties:
        argumentPropertyName1: productDepartments
        argumentPropertyValue1:
          - Clothes
        responsePropertyName: title
        responsePropertyValue: '"secondTitle"'
        responseLength: 1

    - testName: get sales items where productCategories contains 'Clothes'
      testProperties:
        argumentPropertyName1: productCategories
        argumentPropertyValue1:
          - Clothes
        responsePropertyName: title
        responsePropertyValue: '"secondTitle"'
        responseLength: 1

    - testName: get sales items where productSubCategories contains 'Clothes'
      testProperties:
        argumentPropertyName1: productSubCategories
        argumentPropertyValue1:
          - Clothes
        responsePropertyName: title
        responsePropertyValue: '"secondTitle"'
        responseLength: 1

    - testName: get sales items where price is between minPrice and maxPrice
      testProperties:
        argumentPropertyName1: minPrice
        argumentPropertyValue1: 2
        argumentPropertyName2: maxPrice
        argumentPropertyValue2: 2
        responsePropertyName: price
        responsePropertyValue: 2
        responseLength: 1

    - testName: get sales items sorted
      testProperties:
        argumentPropertyName1: sortBys
        argumentPropertyValue1:
          - fieldName: price
            sortDirection: DESC
        responsePropertyName: price
        responsePropertyValue: 2
        responseLength: 2

    - testName: get sales items paginated
      testProperties:
        argumentPropertyName1: paginations
        argumentPropertyValue1:
          - pageNumber: 2
            pageSize: 1
        argumentPropertyName2: sortBys
        argumentPropertyValue2:
          - fieldName: price
            sortDirection: DESC
        responsePropertyName: price
        responsePropertyValue: 1
        responseLength: 1
